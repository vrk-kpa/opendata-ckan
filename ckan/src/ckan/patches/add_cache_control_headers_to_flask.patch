diff --git a/ckan/config/middleware/flask_app.py b/ckan/config/middleware/flask_app.py
index d738a8740..fcd542f34 100644
--- a/ckan/config/middleware/flask_app.py
+++ b/ckan/config/middleware/flask_app.py
@@ -33,7 +33,8 @@ from ckan.plugins.interfaces import IBlueprint, IMiddleware, ITranslation
 from ckan.views import (identify_user,
                         set_cors_headers_for_response,
                         check_session_cookie,
-                        set_controller_and_action
+                        set_controller_and_action,
+                        set_cache_control_headers_for_response
                         )


@@ -306,6 +307,9 @@ def ckan_after_request(response):
     # Set CORS headers if necessary
     response = set_cors_headers_for_response(response)

+    # Set Cache Control headers
+    response = set_cache_control_headers_for_response(response)
+
     # Default to cache-control private if it was not set
     if response.cache_control.private is None:
         response.cache_control.private = True
diff --git a/ckan/lib/base.py b/ckan/lib/base.py
index 6c0f9b321..9c38baaa5 100644
--- a/ckan/lib/base.py
+++ b/ckan/lib/base.py
@@ -14,6 +14,7 @@ from pylons.controllers import WSGIController
 from pylons.controllers.util import abort as _abort
 from pylons.decorators import jsonify
 from pylons.templating import cached_template, pylons_globals
+from paste.deploy.converters import asbool
 from webhelpers.html import literal

 from flask import (
@@ -126,6 +127,7 @@ def render(template_name, extra_vars=None, *pargs, **kwargs):
                                             *pargs, **kwargs)
         return cached_template(template_name, renderer)

+    _allow_caching()
     return flask_render_template(template_name, **extra_vars)


@@ -196,11 +198,9 @@ def _pylons_prepare_renderer(template_name, extra_vars, cache_key=None,
     # Don't cache if we have set the __no_cache__ param in the query string.
     elif request.params.get('__no_cache__'):
         allow_cache = False
-    # Don't cache if we have extra vars containing data.
-    elif extra_vars:
-        for k, v in extra_vars.iteritems():
-            allow_cache = False
-            break
+    # Don't cache if caching is not enabled in config
+    elif not asbool(config.get('ckan.cache_enabled', False)):
+        allow_cache = False

     # TODO: replicate this logic in Flask once we start looking at the
     # rendering for the frontend controllers
@@ -212,6 +212,43 @@ def _pylons_prepare_renderer(template_name, extra_vars, cache_key=None,

     return render_template

+def _allow_caching(cache_force=None):
+    # Caching Logic
+
+    allow_cache = True
+    # Force cache or not if explicit.
+    if cache_force is not None:
+        allow_cache = cache_force
+    # Do not allow caching of pages for logged in users/flash messages etc.
+    elif _is_valid_session_cookie_data():
+        allow_cache = False
+    # Tests etc.
+    elif 'REMOTE_USER' in request.environ:
+        allow_cache = False
+    # Don't cache if based on a non-cachable template used in this.
+    elif request.environ.get('__no_cache__'):
+        allow_cache = False
+    # Don't cache if we have set the __no_cache__ param in the query string.
+    elif request.params.get('__no_cache__'):
+        allow_cache = False
+    # Don't cache if caching is not enabled in config
+    elif not asbool(config.get('ckan.cache_enabled', False)):
+        allow_cache = False
+
+    if not allow_cache:
+        # Prevent any further rendering from being cached.
+        request.environ['__no_cache__'] = True
+
+
+def _is_valid_session_cookie_data():
+    is_valid_cookie_data = False
+    for key, value in session.items():
+        if not key.startswith(u'_') and value:
+            is_valid_cookie_data = True
+            break
+
+    return is_valid_cookie_data
+

 class ValidationException(Exception):
     pass
diff --git a/ckan/views/__init__.py b/ckan/views/__init__.py
index 83dfd7012..425e7e7c4 100644
--- a/ckan/views/__init__.py
+++ b/ckan/views/__init__.py
@@ -72,6 +72,28 @@ def set_cors_headers_for_response(response):

     return response

+def set_cache_control_headers_for_response(response):
+
+    # no_cache should be None when caching is allowed
+    allow_cache = request.environ.get(u'__no_cache__')
+
+    if u'Pragma' in response.headers:
+        del response.headers["Pragma"]
+
+    if allow_cache is None:
+        response.cache_control.public = True
+    try:
+        cache_expire = int(config.get(u'ckan.cache_expires', 0))
+        response.cache_control.max_age = cache_expire
+        response.cache_control.must_revalidate = True
+    except ValueError:
+        pass
+    else:
+        response.cache_control.private = True
+
+    return response
+
+

 def identify_user():
     u'''Try to identify the user
