diff --git a/ckan/lib/base.py b/ckan/lib/base.py
index aa1bce302..650c641d6 100644
--- a/ckan/lib/base.py
+++ b/ckan/lib/base.py
@@ -230,6 +230,43 @@ def _pylons_prepare_renderer(template_name, extra_vars, cache_key=None,
 
     return render_template
 
+def _allow_caching(cache_force=None):
+    # Caching Logic
+
+    allow_cache = True
+    # Force cache or not if explicit.
+    if cache_force is not None:
+        allow_cache = cache_force
+    # Do not allow caching of pages for logged in users/flash messages etc.
+    elif _is_valid_session_cookie_data():
+        allow_cache = False
+    # Tests etc.
+    elif 'REMOTE_USER' in request.environ:
+        allow_cache = False
+    # Don't cache if based on a non-cachable template used in this.
+    elif request.environ.get('__no_cache__'):
+        allow_cache = False
+    # Don't cache if we have set the __no_cache__ param in the query string.
+    elif request.params.get('__no_cache__'):
+        allow_cache = False
+    # Don't cache if caching is not enabled in config
+    elif not asbool(config.get('ckan.cache_enabled', False)):
+        allow_cache = False
+
+    if not allow_cache:
+        # Prevent any further rendering from being cached.
+        request.environ['__no_cache__'] = True
+
+
+def _is_valid_session_cookie_data():
+    is_valid_cookie_data = False
+    for key, value in session.items():
+        if not key.startswith(u'_') and value:
+            is_valid_cookie_data = True
+            break
+
+    return is_valid_cookie_data
+
 
 def _allow_caching(cache_force=None):
     # Caching Logic
diff --git a/ckan/views/__init__.py b/ckan/views/__init__.py
index 3d719167b..881070f74 100644
--- a/ckan/views/__init__.py
+++ b/ckan/views/__init__.py
@@ -118,6 +118,28 @@ def set_cache_control_headers_for_response(response):
 
     return response
 
+def set_cache_control_headers_for_response(response):
+
+    # no_cache should be None when caching is allowed
+    allow_cache = request.environ.get(u'__no_cache__')
+
+    if u'Pragma' in response.headers:
+        del response.headers["Pragma"]
+
+    if allow_cache is None:
+        response.cache_control.public = True
+    try:
+        cache_expire = int(config.get(u'ckan.cache_expires', 0))
+        response.cache_control.max_age = cache_expire
+        response.cache_control.must_revalidate = True
+    except ValueError:
+        pass
+    else:
+        response.cache_control.private = True
+
+    return response
+
+
 
 def identify_user():
     u'''Try to identify the user
